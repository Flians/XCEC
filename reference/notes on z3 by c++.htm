<!DOCTYPE html>
<!-- saved from url=(0070)http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta name="generator" content="Madoko, version 1.0.0-rc5">
  <meta name="viewport" content="initial-scale=1.0">
  <meta name="author" content="**resilience**">
  <title>notes on `z3` `c++` bindings</title>
  <style type="text/css" class="link">
  /*# sourceURL=madoko.css */
  
  .madoko .toc>.tocblock .tocblock .tocblock {
    margin-left: 2.25em;
  }
  .madoko .toc>.tocblock .tocblock {
    margin-left: 1.5em;
  }
  .madoko .toc-contents>.tocblock>.tocitem {
    font-weight: bold;
  }
  .madoko .toc {
    margin-top: 1em;
  }
  .madoko p.para-continue {
    margin-bottom: 0pt;
  }
  .madoko .para-block+p {
    margin-top: 0pt;
  }
  .madoko ul.para-block, .madoko ol.para-block {
    margin-top: 0pt;
    margin-bottom: 0pt;
  }
  .madoko ul.para-end, .madoko ol.para-end {
    margin-bottom: 1em;
  }
  .madoko dl {
    margin-left: 0em;
  }
  .madoko blockquote {
    font-style: italic;
  }
  .madoko a.localref {
    text-decoration: none;
  }
  .madoko a.localref:hover {
    text-decoration: underline;
  }
  .madoko .footnotes {
    font-size: smaller;
    margin-top: 2em;
  }
  .madoko .footnotes hr {
    width: 50%;
    text-align: left;
  }
  .madoko .footnote { 
    margin-left: 1em;
  }
  .madoko .footnote-before {
    margin-left: -1em;
    width: 1em;
    display: inline-block;
  }
  .madoko .align-center, .madoko .align-center>p {
    text-align: center !important;
  }
  .madoko .align-center pre {
    text-align: left;
  }
  .madoko .align-center>* {
    margin-left: auto !important;
    margin-right: auto !important;
  }
  .madoko .align-left, .madoko .align-left>p {
    text-align: left !important;
  }
  .madoko .align-left>* {
    margin-left: 0pt !important;
    margin-right: auto !important;
  }
  .madoko .align-right, .madoko .align-right>p {
    text-align: right !important;
  }
  .madoko .align-right>* {
    margin-left: auto !important;
    margin-right: 0pt !important;
  }
  .madoko .align-center>table,
  .madoko .align-left>table,
  .madoko .align-right>table {
    text-align: left !important;
  }
  .madoko .equation-before {
    float: right;
  }
  .madoko .bibitem {
    font-size: smaller;
  }
  .madoko .bibsearch {
    font-size: x-small;
    text-decoration:none;
    color: black;
    font-family: "Segoe UI Symbol", Symbola, serif;
  }
  .madoko .block, .madoko .figure, .madoko .bibitem, .madoko .equation, .madoko div.math {
    margin-top: 1ex;
    margin-bottom: 1ex;
  }
  .madoko .figure {
    padding: 0.5em;
    margin-left: 0pt;
    margin-right: 0pt;
  }
  .madoko .hidden {
    display: none;
  }
  .madoko .invisible {
    visibility: hidden;
  }
  .madoko.preview .invisible {
    visibility: visible;
    opacity: 0.5;
  }
  .madoko code.code, .madoko span.code {
    white-space: pre-wrap;
  }
  .madoko hr, hr.madoko {
    border: none;
    border-bottom: black solid 1px;
    margin-bottom: 0.5ex;
  }
  .madoko .framed>*:first-child {
    margin-top: 0pt;
  }
  .madoko .framed>*:last-child {
    margin-bottom: 0pt;
  }
  .madoko ul.list-style-type-dash {
      list-style-type: none !important;
  }
  .madoko ul.list-style-type-dash > li:before {
      content: "\2013"; 
      position: absolute;
      margin-left: -1em; 
  }
  .madoko table.madoko {
    border-collapse: collapse;
  }
  .madoko td, .madoko th {
    padding: 0ex 0.5ex;
    margin: 0pt;
    vertical-align: top;
  }
  .madoko .cell-border-left {
    border-left: 1px solid black;
  }
  .madoko .cell-border-right {
    border-right: 1px solid black;
  }
  .madoko thead>tr:first-child>.cell-line,
  .madoko tbody:first-child>tr:first-child>.cell-line {
    border-top: 1px solid black;
    border-bottom: none;
  }
  .madoko .cell-line, .madoko .cell-double-line {
    border-bottom: 1px solid black;
    border-top: none;
  }
  .madoko .cell-double-line {
    border-top: 1px solid black;
    padding-top: 1.5px !important;
  }
  .madoko .input-mathpre .MathJax_Display {
    text-align: left !important;
  }
  .madoko div.input-mathpre {
    text-align: left;
    margin-top: 1.5ex;
    margin-bottom: 1ex;
  }
  .madoko .math-rendering {
    color: gray;
  }
  .madoko .mathdisplay {
    text-align: center;
  }
  .madoko .pretty table {
    border-collapse: collapse;
  }
  .madoko .pretty td {
    padding: 0em;
  }
  .madoko .pretty td.empty {
    min-width: 1.5ex;
  }
  .madoko .pretty td.expander {
    width: 100em;
  }
  body.madoko, .madoko .serif {
    font-family: Cambria,"Times New Roman","Liberation Serif","Times",serif;
  }
  .madoko .sans-serif {
    font-family: "Calibri", "Optima", sans-serif;
  }
  .madoko .symbol {
    font-family: "Segoe UI Symbol", Symbola, serif;
  }
  body.madoko {  
    -webkit-text-size-adjust: 100%;       
    text-rendering: optimizeLegibility;
  }
  body.madoko {
    max-width: 88ex; 
    margin: 1em auto;
    padding: 0em 2em;  
  }
  body.preview.madoko {
    padding: 0em 1em;
  }
  .madoko p {
    text-align: justify;
  }
  .madoko h1, .madoko h2, .madoko h3, .madoko h4 { 
    margin-top: 1.22em; 
    margin-bottom: 1ex;
  }
  .madoko h1+p, .madoko h2+p, .madoko h3+p, .madoko h4+p, .madoko h5+p  { 
    margin-top: 1ex;    
  }
  .madoko h5, .madoko h6 { 
    margin-top: 1ex;
    font-size: 1em;
  }
  .madoko h5 { 
    margin-bottom: 0.5ex;
  }
  .madoko h5 + p {
    margin-top: 0.5ex;
  }
  .madoko h6 { 
    margin-bottom: 0pt;
  }
  .madoko h6 + p {
    margin-top: 0pt;
  }
  .madoko pre, .madoko code, .madoko kbd, .madoko samp, .madoko tt, 
  .madoko .monospace, .madoko .token-indent, .madoko .reveal pre, .madoko .reveal code, .madoko .email {
    font-family: Consolas,"Andale Mono WT","Andale Mono",Lucida Console,Monaco,monospace,monospace;
    font-size: 0.85em;
  }
  .madoko pre code, .madoko .token-indent {
    font-size: 0.95em;
  }
  .madoko pre code {
    font-family: inherit !important;
  }
  .madoko ol.linenums li {
    background-color: white;
    list-style-type: decimal;
  }
  .madoko .remote {
    background-color: #F0FFF0;
  }
  .madoko .remote + * {
    margin-top: 0pt;
  }
  @media print {
    body.madoko {
      font-size: 10pt;
    }
    @page {
      margin: 1in 1.5in;
    }
  }
  @media only screen and (max-device-width:1024px) {
    body.madoko {
      padding: 0em 0.5em;    
    }
    .madoko li {
      text-align: left;
    }
  }
  
    </style>
  
  </head>
<body class="madoko" data-gr-c-s-loaded="true">

<div class="body madoko" style="line-adjust:0">

<div class="titleblock align-center para-block" style="text-align:center;line-adjust:0">
<div class="titleheader align-center" style="text-align:center;line-adjust:0">
<div class="title para-block" style="font-size:xx-large;font-weight:bold;margin-bottom:0.5ex;line-adjust:0">notes on <code class="code code1">z3</code> <code class="code code1">c++</code> bindings</div></div>
<div class="authors align-center" style="text-align:center;width:80%;line-adjust:0"><table class="authorrow columns block" style="margin-top:2ex;width:100%;line-adjust:0">
<tbody><tr><td class="author column" style="text-align:center;line-adjust:0">
<div class="authorname" style="font-size:large;line-adjust:0"><strong class="strong-star2">resilience</strong></div>
<div class="authoraddress" style="line-adjust:0">gauss research lab</div>
<div class="authoremail email" style="line-adjust:0">gauss@cs.utah.edu</div></td></tr></tbody></table></div></div><span data-line=""></span>
<nav class="toc toc-contents"><h2 id="sec-contents" class="clearnum h1 heading-contents" data-heading-depth="1" style="display:block">Contents</h2>
<div class="tocblock tocblock1">
<div class="tocitem tocitem1" data-toc-target="sec-z3" data-toc-depth="1" data-toc-line="[1]{.heading-label}. z3" style="toctarget:sec-z3"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-z3" class="localref"><span class="heading-label">1</span>. z3</a></div>
<div class="tocblock tocblock2">
<div class="tocitem tocitem2" data-toc-target="sec-about" data-toc-depth="2" data-toc-line="[1.1]{.heading-label}. about" style="toctarget:sec-about"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-about" class="localref"><span class="heading-label">1.1</span>. about</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-building" data-toc-depth="2" data-toc-line="[1.2]{.heading-label}. building" style="toctarget:sec-building"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-building" class="localref"><span class="heading-label">1.2</span>. building</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-bindings" data-toc-depth="2" data-toc-line="[1.3]{.heading-label}. bindings" style="toctarget:sec-bindings"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-bindings" class="localref"><span class="heading-label">1.3</span>. bindings</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-z3-c-interface-cheat-sheet" data-toc-depth="2" data-toc-line="[1.4]{.heading-label}. z3 `c++` interface cheat-sheet" style="toctarget:sec-z3-c-interface-cheat-sheet"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-z3-c-interface-cheat-sheet" class="localref"><span class="heading-label">1.4</span>. z3 <code class="code code1">c++</code> interface cheat-sheet</a></div></div>
<div class="tocitem tocitem1" data-toc-target="sec-c-examples" data-toc-depth="1" data-toc-line="[2]{.heading-label}. c++ examples" style="toctarget:sec-c-examples"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-c-examples" class="localref"><span class="heading-label">2</span>. c++ examples</a></div>
<div class="tocblock tocblock2">
<div class="tocitem tocitem2" data-toc-target="sec-z3-hello-world" data-toc-depth="2" data-toc-line="[2.1]{.heading-label}. z3 hello world" style="toctarget:sec-z3-hello-world"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-z3-hello-world" class="localref"><span class="heading-label">2.1</span>. z3 hello world</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-using-get_model" data-toc-depth="2" data-toc-line="[2.2]{.heading-label}. Using `get_model()`" style="toctarget:sec-using-get_model"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-using-get_model" class="localref"><span class="heading-label">2.2</span>. Using <code class="code code1">get_model()</code></a></div>
<div class="tocitem tocitem2" data-toc-target="sec-un-interpreted-types-and-functions" data-toc-depth="2" data-toc-line="[2.3]{.heading-label}. Un-Interpreted Types and Functions" style="toctarget:sec-un-interpreted-types-and-functions"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-un-interpreted-types-and-functions" class="localref"><span class="heading-label">2.3</span>. Un-Interpreted Types and Functions</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-combine-un-interpreted-functions-and-airthmetic" data-toc-depth="2" data-toc-line="[2.4]{.heading-label}. Combine Un-Interpreted Functions and Airthmetic" style="toctarget:sec-combine-un-interpreted-functions-and-airthmetic"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-combine-un-interpreted-functions-and-airthmetic" class="localref"><span class="heading-label">2.4</span>. Combine Un-Interpreted Functions and Airthmetic</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-non-linear-arithmetic" data-toc-depth="2" data-toc-line="[2.5]{.heading-label}. Non linear arithmetic" style="toctarget:sec-non-linear-arithmetic"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-non-linear-arithmetic" class="localref"><span class="heading-label">2.5</span>. Non linear arithmetic</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-another-hello-z3-" data-toc-depth="2" data-toc-line="[2.6]{.heading-label}. Another hello z3:" style="toctarget:sec-another-hello-z3-"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-another-hello-z3-" class="localref"><span class="heading-label">2.6</span>. Another hello z3:</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-using-bit-vectors" data-toc-depth="2" data-toc-line="[2.7]{.heading-label}. Using bit-vectors" style="toctarget:sec-using-bit-vectors"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-using-bit-vectors" class="localref"><span class="heading-label">2.7</span>. Using bit-vectors</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-another-get_model" data-toc-depth="2" data-toc-line="[2.8]{.heading-label}. Another get_model()" style="toctarget:sec-another-get_model"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-another-get_model" class="localref"><span class="heading-label">2.8</span>. Another get_model()</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-mixing-c-and-c-apis" data-toc-depth="2" data-toc-line="[2.9]{.heading-label}. Mixing C and C++ APIs." style="toctarget:sec-mixing-c-and-c-apis"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-mixing-c-and-c-apis" class="localref"><span class="heading-label">2.9</span>. Mixing C and C++ APIs.</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-how-to-evaluate-expressions-in-a-model" data-toc-depth="2" data-toc-line="[2.10]{.heading-label}. How to evaluate expressions in a model." style="toctarget:sec-how-to-evaluate-expressions-in-a-model"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-how-to-evaluate-expressions-in-a-model" class="localref"><span class="heading-label">2.10</span>. How to evaluate expressions in a model.</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-several-contexts-can-be-used-simultaneously" data-toc-depth="2" data-toc-line="[2.11]{.heading-label}. Several contexts can be used simultaneously." style="toctarget:sec-several-contexts-can-be-used-simultaneously"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-several-contexts-can-be-used-simultaneously" class="localref"><span class="heading-label">2.11</span>. Several contexts can be used simultaneously.</a></div>
<div class="tocitem tocitem2" data-toc-target="sec-dealing-with-rational-numbers" data-toc-depth="2" data-toc-line="[2.12]{.heading-label}. Dealing with Rational numbers" style="toctarget:sec-dealing-with-rational-numbers"><a href="http://www.cs.utah.edu/~vinu/research/formal/tools/notes/z3-notes.html#sec-dealing-with-rational-numbers" class="localref"><span class="heading-label">2.12</span>. Dealing with Rational numbers</a></div></div></div></nav><h2 id="sec-z3" class="h1" data-heading-depth="1" style="display:block"><span class="heading-before"><span class="heading-label">1</span>. </span>z3</h2><h3 id="sec-about" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">1.1</span>. </span>about</h3>
<ul class="ul list-star loose">
<li class="li ul-li list-star-li loose-li">
<p>z3 is a <code class="code code1">theorem</code> prover.
</p></li>
<li class="li ul-li list-star-li loose-li">
<p>For examples, we can ask z3 to prove the following:
</p></li>
<li class="li ul-li list-star-li loose-li">
<p>your conjecture:
</p>
<div class="equation para-block" style="line-adjust:0"><span class="equation-before"><span class="equation-label">(1)</span></span>

<div class="mathdisplay para-block input-math" data-math-full="" style="line-adjust:0"><svg class="mathdisplay math-display math-render-svg math" data-math-full="" style="vertical-align:-0.0210em;height:1.0881em;width:8.9003em" viewBox="217.839 56.156 84.765 10.363"><desc>\[\neg(x \wedge y) = \neg x \lor \neg y
\]</desc><g id="page2"><use x="218.039" xlink:href="#g0-58" y="63.828"></use><use x="224.656" xlink:href="#g2-40" y="63.828"></use><use x="228.516" xlink:href="#g1-120" y="63.828"></use><use x="236.402" xlink:href="#g0-94" y="63.828"></use><use x="245.233" xlink:href="#g1-121" y="63.828"></use><use x="250.457" xlink:href="#g2-41" y="63.828"></use><use x="257.084" xlink:href="#g2-61" y="63.828"></use><use x="267.571" xlink:href="#g0-58" y="63.828"></use><use x="274.188" xlink:href="#g1-120" y="63.828"></use><use x="282.075" xlink:href="#g0-95" y="63.828"></use><use x="290.906" xlink:href="#g0-58" y="63.828"></use><use x="297.523" xlink:href="#g1-121" y="63.828"></use></g></svg></div></div></li>
<li class="li ul-li list-star-li loose-li">
<p>z3-interface:
</p>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>(declare-fun y () Bool)
(declare-fun x () Bool)
(assert (not (= (not (and x y)) (or (not x) (not y)))))
(check-sat)</code></pre></li>
<li class="li ul-li list-star-li loose-li">
<p>z3-output:
</p>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>If <span style="color:blue">this</span> theorem is satisfyable      : sat
If <span style="color:blue">this</span> theorem is not satisfyable  : unsat
If <span style="color:blue">this</span> proving process times out   : unknown</code></pre></li></ul>
<h3 id="sec-building" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">1.2</span>. </span>building</h3>
<ul class="ul list-star compact">
<li class="li ul-li list-star-li compact-li">clone from <code class="code code1">github</code>, and build using <code class="code code1">gnu make</code>
</li>
<li class="li ul-li list-star-li compact-li">Steps:

<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>git clone https:<span style="color:darkgreen">//github.com/Z3Prover/z3.git</span>
python scripts/mk_make.py
cd build
make
sudo make install
make examples</code></pre></li></ul>
<h3 id="sec-bindings" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">1.3</span>. </span>bindings</h3>
<ul class="ul list-star compact">
<li class="li ul-li list-star-li compact-li">z3 has bindings for various programming languages.
</li>
<li class="li ul-li list-star-li compact-li">c++ bindings is what we currently are interested in.
</li>
<li class="li ul-li list-star-li compact-li">these bindings generate code in <code class="code code1">smt2</code> format.
</li></ul>
<h3 id="sec-z3-c-interface-cheat-sheet" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">1.4</span>. </span>z3 <code class="code code1">c++</code> interface cheat-sheet</h3>
<ul class="ul list-star loose">
<li class="li ul-li list-star-li loose-li">
<p>class expr 
</p>
<pre class="para-block pre-fenced pre-fenced3" style="display:block"><code>  F.app()
  F.decl()
  F.simplify()
  F.arg()</code></pre></li>
<li class="li ul-li list-star-li loose-li">
<p>class expr_vector
</p>
<pre class="para-block pre-fenced pre-fenced3" style="display:block"><code>   ev.size()</code></pre></li>
<li class="li ul-li list-star-li loose-li">
<p>class context
</p>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>  context c
  c.bool_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>)
  c.int_constant(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>)
  c.int_sort(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>)
  c.real_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>)
  c.real_val(<span style="color:maroon">"</span><span style="color:maroon">-1/3</span><span style="color:maroon">"</span>)
  c.bv_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>,<span class="constant" style="color:purple">32</span>)
  c.int_sort()</code></pre></li>
<li class="li ul-li list-star-li loose-li">
<p>class solver 
</p>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>  solver s(c)
  s.add()
  s.set(p)
  s.check()
  s.get_model()
  s.unsat_core()</code></pre>
<p><code class="code code1"></code>`
</p></li>
<li class="li ul-li list-star-li loose-li">
<p>class param
</p>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>param p(c)
p.set(<span style="color:maroon">"</span><span style="color:maroon">mul2concat</span><span style="color:maroon">"</span>, <span style="color:blue">true</span>)</code></pre></li>
<li class="li ul-li list-star-li loose-li">
<p>class tactic
</p>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>tactic t</code></pre></li>
<li class="li ul-li list-star-li loose-li">
<p>misc Functions:
</p>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>  <span style="color:blue">function</span>()
  implies()
  prove()
  distinct()</code></pre></li></ul>
<h2 id="sec-c-examples" class="h1" data-heading-depth="1" style="display:block"><span class="heading-before"><span class="heading-label">2</span>. </span>c++ examples</h2><h3 id="sec-z3-hello-world" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">2.1</span>. </span>z3 hello world</h3>
<p class="p noindent para-continue">Proove <code class="code code1">theorem</code> with boolean variables:
</p>
<div class="equation para-block" style="line-adjust:0"><span class="equation-before"><span class="equation-label">(2)</span></span>

<div class="mathdisplay para-block input-math" data-math-full="" style="line-adjust:0"><svg class="mathdisplay math-display math-render-svg math" data-math-full="" style="vertical-align:-0.0210em;height:1.0881em;width:8.9003em" viewBox="217.839 56.156 84.765 10.363"><desc>\[\neg(x \wedge y) = \neg x \lor \neg y
\]</desc><g id="page2"><use x="218.039" xlink:href="#g0-58" y="63.828"></use><use x="224.656" xlink:href="#g2-40" y="63.828"></use><use x="228.516" xlink:href="#g1-120" y="63.828"></use><use x="236.402" xlink:href="#g0-94" y="63.828"></use><use x="245.233" xlink:href="#g1-121" y="63.828"></use><use x="250.457" xlink:href="#g2-41" y="63.828"></use><use x="257.084" xlink:href="#g2-61" y="63.828"></use><use x="267.571" xlink:href="#g0-58" y="63.828"></use><use x="274.188" xlink:href="#g1-120" y="63.828"></use><use x="282.075" xlink:href="#g0-95" y="63.828"></use><use x="290.906" xlink:href="#g0-58" y="63.828"></use><use x="297.523" xlink:href="#g1-121" y="63.828"></use></g></svg></div></div>
<ol class="ol compact">
<li class="li ol-li compact-li">create a solver
</li>
<li class="li ol-li compact-li">assert the negation of the conjecture
</li>
<li class="li ol-li compact-li">checks if the result is unsat.
</li></ol>

<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>    <span style="color:darkgreen">//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>
    <span style="color:darkgreen">// STEP-0 init</span>
    context c;
    expr x = c.bool_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>);
    expr y = c.bool_const(<span style="color:maroon">"</span><span style="color:maroon">y</span><span style="color:maroon">"</span>);
    expr conjecture = !(x &amp;&amp; y) == (!x || !y);
    
    <span style="color:darkgreen">// STEP-1  create a solver</span>
    solver s(c);
    
    <span style="color:darkgreen">// STEP-2 assert the negation of the conjecture</span>
    s.add(!conjecture);
    
    std::cout &lt;&lt; s &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    std::cout &lt;&lt; s.to_smt2() &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
     
    <span style="color:darkgreen">// STEP-3 checks if the result is unsat.</span>
    <span style="color:blue">switch</span> (s.check()) {
    <span style="color:blue">case</span> unsat:   std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">de-Morgan is valid</span><span style="color:gray">\n</span><span style="color:maroon">"</span>; <span style="color:blue">break</span>;
    <span style="color:blue">case</span> sat:     std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">de-Morgan is not valid</span><span style="color:gray">\n</span><span style="color:maroon">"</span>; <span style="color:blue">break</span>;
    <span style="color:blue">case</span> unknown: std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">unknown</span><span style="color:gray">\n</span><span style="color:maroon">"</span>; <span style="color:blue">break</span>;
    }
    
    <span style="color:darkgreen">//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>
    
    Z3 OUTPUT:
    
    (declare-fun y () Bool)
    (declare-fun x () Bool)
    (assert (not (= (not (and x y)) (or (not x) (not y)))))
    (check-sat)
    de-Morgan is valid
    <span style="color:darkgreen">//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></code></pre>
<p class="p noindent para-continued">Classes used: 
</p>
<ul class="ul list-star compact">
<li class="li ul-li list-star-li compact-li"><code class="code code1">context</code>
</li>
<li class="li ul-li list-star-li compact-li"><code class="code code1">expr</code>
</li>
<li class="li ul-li list-star-li compact-li"><code class="code code1">solver</code>
</li></ul>
<h3 id="sec-using-get_model" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">2.2</span>. </span>Using <code class="code code1">get_model()</code></h3>
<p class="p noindent para-continue">How to find values of expressions that satisfy the following:
</p>
<div class="equation para-block" style="line-adjust:0"><span class="equation-before"><span class="equation-label">(3)</span></span>

<div class="mathdisplay para-block input-math" data-math-full="" style="line-adjust:0"><svg class="mathdisplay math-display math-render-svg math" data-math-full="" style="vertical-align:-0.0210em;height:0.8820em;width:2.4676em" viewBox="194.545 56.993 23.501 8.4"><desc>\[ x \ge 1
\]</desc><g id="page3"><use x="194.745" xlink:href="#g1-120" y="63.828"></use><use x="203.185" xlink:href="#g0-21" y="63.828"></use><use x="213.673" xlink:href="#g2-49" y="63.828"></use></g></svg></div></div>
<div class="equation para-block" style="line-adjust:0"><span class="equation-before"><span class="equation-label">(4)</span></span>

<div class="mathdisplay para-block input-math" data-math-full="" style="line-adjust:0"><svg class="mathdisplay math-display math-render-svg math" data-math-full="" style="vertical-align:-0.0210em;height:0.9531em;width:4.3314em" viewBox="239.635 56.993 41.251 9.077"><desc>\[ y &lt; x + 3
\]</desc><g id="page4"><use x="239.835" xlink:href="#g1-121" y="63.828"></use><use x="247.826" xlink:href="#g1-60" y="63.828"></use><use x="258.313" xlink:href="#g1-120" y="63.828"></use><use x="266.199" xlink:href="#g2-43" y="63.828"></use><use x="276.133" xlink:href="#g2-51" y="63.828"></use></g></svg></div></div>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>    context c;
    expr x = c.int_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>);
    expr y = c.int_const(<span style="color:maroon">"</span><span style="color:maroon">y</span><span style="color:maroon">"</span>);
    solver s(c);

    s.add(x &gt;= <span class="constant" style="color:purple">1</span>);
    s.add(y &lt; x + <span class="constant" style="color:purple">3</span>);
    std::cout &lt;&lt; s.check() &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;

    model m = s.get_model();
    std::cout &lt;&lt; m &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    
    <span style="color:darkgreen">// traversing the model</span>
    <span style="color:blue">for</span> (unsigned i = <span class="constant" style="color:purple">0</span>; i &lt; m.size(); i++) {
        func_decl v = m[i];
        assert(v.arity() == <span class="constant" style="color:purple">0</span>);
         
        std::cout &lt;&lt; v.name() &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon"> = </span><span style="color:maroon">"</span> &lt;&lt; m.get_const_interp(v) &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    }
    
    <span style="color:darkgreen">// we can evaluate expressions in the model.</span>
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">x + y + 1 = </span><span style="color:maroon">"</span> &lt;&lt; m.eval(x + y + <span class="constant" style="color:purple">1</span>) &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;

OUTPUT:

sat
(define-fun x () Int  <span class="constant" style="color:purple">1</span>)
(define-fun y () Int  <span class="constant" style="color:purple">3</span>)
x = <span class="constant" style="color:purple">1</span>
y = <span class="constant" style="color:purple">3</span>
x + y + <span class="constant" style="color:purple">1</span> = <span class="constant" style="color:purple">5</span></code></pre><h3 id="sec-un-interpreted-types-and-functions" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">2.3</span>. </span>Un-Interpreted Types and Functions</h3>
<p class="p noindent para-continue">Prove that :
</p>
<div class="equation para-block" style="line-adjust:0"><span class="equation-before"><span class="equation-label">(5)</span></span>

<div class="mathdisplay para-block input-math" data-math-full="" style="line-adjust:0"><svg class="mathdisplay math-display math-render-svg math" data-math-full="" style="vertical-align:-0.0210em;height:1.0881em;width:10.5418em" viewBox="155.887 56.156 100.398 10.363"><desc>\[ x = y \implies g(x) = g(y)
\]</desc><g id="page5"><use x="156.087" xlink:href="#g1-120" y="63.828"></use><use x="164.527" xlink:href="#g2-61" y="63.828"></use><use x="175.014" xlink:href="#g1-121" y="63.828"></use><use x="185.773" xlink:href="#g2-61" y="63.828"></use><use x="191.832" xlink:href="#g0-41" y="63.828"></use><use x="207.292" xlink:href="#g1-103" y="63.828"></use><use x="212.384" xlink:href="#g2-40" y="63.828"></use><use x="216.244" xlink:href="#g1-120" y="63.828"></use><use x="221.916" xlink:href="#g2-41" y="63.828"></use><use x="228.544" xlink:href="#g2-61" y="63.828"></use><use x="239.031" xlink:href="#g1-103" y="63.828"></use><use x="244.122" xlink:href="#g2-40" y="63.828"></use><use x="247.982" xlink:href="#g1-121" y="63.828"></use><use x="253.206" xlink:href="#g2-41" y="63.828"></use></g></svg></div></div>
<p class="p noindent para-continued para-continue">Disprove that
</p>
<div class="equation para-block" style="line-adjust:0"><span class="equation-before"><span class="equation-label">(6)</span></span>

<div class="mathdisplay para-block input-math" data-math-full="" style="line-adjust:0"><svg class="mathdisplay math-display math-render-svg math" data-math-full="" style="vertical-align:-0.0210em;height:1.0881em;width:11.8869em" viewBox="203.257 56.156 113.209 10.363"><desc>\[ x = y \implies g(g(x)) = g(y)
\]</desc><g id="page6"><use x="203.457" xlink:href="#g1-120" y="63.828"></use><use x="211.897" xlink:href="#g2-61" y="63.828"></use><use x="222.384" xlink:href="#g1-121" y="63.828"></use><use x="233.142" xlink:href="#g2-61" y="63.828"></use><use x="239.201" xlink:href="#g0-41" y="63.828"></use><use x="254.662" xlink:href="#g1-103" y="63.828"></use><use x="259.753" xlink:href="#g2-40" y="63.828"></use><use x="263.613" xlink:href="#g1-103" y="63.828"></use><use x="268.705" xlink:href="#g2-40" y="63.828"></use><use x="272.564" xlink:href="#g1-120" y="63.828"></use><use x="278.237" xlink:href="#g2-41" y="63.828"></use><use x="282.097" xlink:href="#g2-41" y="63.828"></use><use x="288.724" xlink:href="#g2-61" y="63.828"></use><use x="299.211" xlink:href="#g1-103" y="63.828"></use><use x="304.303" xlink:href="#g2-40" y="63.828"></use><use x="308.163" xlink:href="#g1-121" y="63.828"></use><use x="313.387" xlink:href="#g2-41" y="63.828"></use></g></svg></div></div>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>    context c;
    
    expr x      = c.int_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>);
    expr y      = c.int_const(<span style="color:maroon">"</span><span style="color:maroon">y</span><span style="color:maroon">"</span>);
    
    sort I      = c.int_sort();
    
    func_decl g = <span style="color:blue">function</span>(<span style="color:maroon">"</span><span style="color:maroon">g</span><span style="color:maroon">"</span>, I, I);
    
    solver s(c);
    
    expr conjecture1 = implies(x == y, g(x) == g(y));
    
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">conjecture 1</span><span style="color:gray">\n</span><span style="color:maroon">"</span> &lt;&lt; conjecture1 &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    s.add(!conjecture1);
    
    <span style="color:blue">if</span> (s.check() == unsat) 
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">proved</span><span style="color:maroon">"</span> &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    <span style="color:blue">else</span>
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">failed to prove</span><span style="color:maroon">"</span> &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;

    s.reset(); <span style="color:darkgreen">// remove all assertions from solver s</span>

    expr conjecture2 = implies(x == y, g(g(x)) == g(y));
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">conjecture 2</span><span style="color:gray">\n</span><span style="color:maroon">"</span> &lt;&lt; conjecture2 &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    s.add(!conjecture2);
    <span style="color:blue">if</span> (s.check() == unsat) {
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">proved</span><span style="color:maroon">"</span> &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    }
    <span style="color:blue">else</span> {
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">failed to prove</span><span style="color:maroon">"</span> &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
        model m = s.get_model();
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">counterexample:</span><span style="color:gray">\n</span><span style="color:maroon">"</span> &lt;&lt; m &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">g(g(x)) = </span><span style="color:maroon">"</span> &lt;&lt; m.eval(g(g(x))) &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">g(y)    = </span><span style="color:maroon">"</span> &lt;&lt; m.eval(g(y)) &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    }
}

OUTPUT:
conjecture <span class="constant" style="color:purple">1</span>
 (=&gt; (= x y) (= (g x) (g y)))
 proved

conjecture <span class="constant" style="color:purple">2</span>
 (=&gt; (= x y) (= (g (g x)) (g y)))
 failed to prove

counterexample:
 (define-fun y () Int <span class="constant" style="color:purple">0</span>)
 (define-fun x () Int <span class="constant" style="color:purple">0</span>)
 (define-fun g ((x!<span class="constant" style="color:purple">1</span> Int)) Int
  (ite (= x!<span class="constant" style="color:purple">1</span> <span class="constant" style="color:purple">0</span>) <span class="constant" style="color:purple">1</span> (ite (= x!<span class="constant" style="color:purple">1</span> <span class="constant" style="color:purple">1</span>) <span class="constant" style="color:purple">2</span> <span class="constant" style="color:purple">1</span>)))
  
 g(g(x)) = <span class="constant" style="color:purple">2</span>
 g(y)    = <span class="constant" style="color:purple">1</span>
</code></pre><h3 id="sec-combine-un-interpreted-functions-and-airthmetic" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">2.4</span>. </span>Combine Un-Interpreted Functions and Airthmetic</h3>
<p class="p noindent para-continue">Prove :
</p>
<div class="equation para-block" style="line-adjust:0"><span class="equation-before"><span class="equation-label">(7)</span></span>

<div class="mathdisplay para-block input-math" data-math-full="" style="line-adjust:0"><svg class="mathdisplay math-display math-render-svg math" data-math-full="" style="vertical-align:-0.0210em;height:1.0881em;width:11.1672em" viewBox="152.88 56.156 106.354 10.363"><desc>\[ \neg ( g( g(x) - g(y) ) = g(z) )
\]</desc><g id="page7"><use x="153.08" xlink:href="#g0-58" y="63.828"></use><use x="159.697" xlink:href="#g2-40" y="63.828"></use><use x="163.557" xlink:href="#g1-103" y="63.828"></use><use x="168.648" xlink:href="#g2-40" y="63.828"></use><use x="172.508" xlink:href="#g1-103" y="63.828"></use><use x="177.6" xlink:href="#g2-40" y="63.828"></use><use x="181.46" xlink:href="#g1-120" y="63.828"></use><use x="187.132" xlink:href="#g2-41" y="63.828"></use><use x="193.206" xlink:href="#g0-0" y="63.828"></use><use x="203.14" xlink:href="#g1-103" y="63.828"></use><use x="208.231" xlink:href="#g2-40" y="63.828"></use><use x="212.091" xlink:href="#g1-121" y="63.828"></use><use x="217.315" xlink:href="#g2-41" y="63.828"></use><use x="221.175" xlink:href="#g2-41" y="63.828"></use><use x="227.802" xlink:href="#g2-61" y="63.828"></use><use x="238.289" xlink:href="#g1-103" y="63.828"></use><use x="243.381" xlink:href="#g2-40" y="63.828"></use><use x="247.241" xlink:href="#g1-122" y="63.828"></use><use x="252.295" xlink:href="#g2-41" y="63.828"></use><use x="256.155" xlink:href="#g2-41" y="63.828"></use></g></svg></div></div>
<div class="equation para-block" style="line-adjust:0"><span class="equation-before"><span class="equation-label">(8)</span></span>

<div class="mathdisplay para-block input-math" data-math-full="" style="line-adjust:0"><svg class="mathdisplay math-display math-render-svg math" data-math-full="" style="vertical-align:-0.0210em;height:0.9531em;width:11.6156em" viewBox="204.873 56.993 110.625 9.077"><desc>\[x + z \le y \le x \implies z &lt; 0
\]</desc><g id="page8"><use x="205.073" xlink:href="#g1-120" y="63.828"></use><use x="212.959" xlink:href="#g2-43" y="63.828"></use><use x="222.893" xlink:href="#g1-122" y="63.828"></use><use x="230.714" xlink:href="#g0-20" y="63.828"></use><use x="241.201" xlink:href="#g1-121" y="63.828"></use><use x="249.192" xlink:href="#g0-20" y="63.828"></use><use x="259.679" xlink:href="#g1-120" y="63.828"></use><use x="270.887" xlink:href="#g2-61" y="63.828"></use><use x="276.946" xlink:href="#g0-41" y="63.828"></use><use x="292.406" xlink:href="#g1-122" y="63.828"></use><use x="300.228" xlink:href="#g1-60" y="63.828"></use><use x="310.715" xlink:href="#g2-48" y="63.828"></use></g></svg></div></div>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>    context c;

    expr x      = c.int_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>);
    expr y      = c.int_const(<span style="color:maroon">"</span><span style="color:maroon">y</span><span style="color:maroon">"</span>);
    expr z      = c.int_const(<span style="color:maroon">"</span><span style="color:maroon">z</span><span style="color:maroon">"</span>);
    sort I      = c.int_sort();

    func_decl g = <span style="color:blue">function</span>(<span style="color:maroon">"</span><span style="color:maroon">g</span><span style="color:maroon">"</span>, I, I);
    
    expr conjecture1 = implies(g(g(x) - g(y)) != g(z) &amp;&amp; x + z &lt;= y &amp;&amp; y &lt;= x,
                               z &lt; <span class="constant" style="color:purple">0</span>);

    solver s(c);
    s.add(!conjecture1);
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">conjecture 1:</span><span style="color:gray">\n</span><span style="color:maroon">"</span> &lt;&lt; conjecture1 &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    <span style="color:blue">if</span> (s.check() == unsat) 
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">proved</span><span style="color:maroon">"</span> &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    <span style="color:blue">else</span>
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">failed to prove</span><span style="color:maroon">"</span> &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;

    expr conjecture2 = implies(g(g(x) - g(y)) != g(z) &amp;&amp; x + z &lt;= y &amp;&amp; y &lt;= x,
                               z &lt; -<span class="constant" style="color:purple">1</span>);
    s.reset();
    s.add(!conjecture2);
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">conjecture 2:</span><span style="color:gray">\n</span><span style="color:maroon">"</span> &lt;&lt; conjecture2 &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    <span style="color:blue">if</span> (s.check() == unsat) {
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">proved</span><span style="color:maroon">"</span> &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    }
    <span style="color:blue">else</span> {
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">failed to prove</span><span style="color:maroon">"</span> &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">counterexample:</span><span style="color:gray">\n</span><span style="color:maroon">"</span> &lt;&lt; s.get_model() &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    }
}

OUTPUT:

conjecture <span class="constant" style="color:purple">1</span>:
(let ((a!<span class="constant" style="color:purple">1</span> (distinct (g (- (g x) (g y))) (g z)))) (=&gt; (and a!<span class="constant" style="color:purple">1</span> (&lt;= (+ x z) y) (&lt;= y x)) (&lt; z <span class="constant" style="color:purple">0</span>)))
proved

conjecture <span class="constant" style="color:purple">2</span>:
(let ((a!<span class="constant" style="color:purple">1</span> (distinct (g (- (g x) (g y))) (g z)))) (=&gt; (and a!<span class="constant" style="color:purple">1</span> (&lt;= (+ x z) y) (&lt;= y x)) (&lt; z (- <span class="constant" style="color:purple">1</span>))))
failed to prove
counterexample:
(define-fun z () Int (- <span class="constant" style="color:purple">1</span>))
(define-fun y () Int <span class="constant" style="color:purple">0</span>)
(define-fun x () Int <span class="constant" style="color:purple">0</span>)
(define-fun g ((x!<span class="constant" style="color:purple">1</span> Int)) Int (ite (= x!<span class="constant" style="color:purple">1</span> <span class="constant" style="color:purple">0</span>) <span class="constant" style="color:purple">0</span> (ite (= x!<span class="constant" style="color:purple">1</span> (- <span class="constant" style="color:purple">1</span>)) <span class="constant" style="color:purple">1</span> <span class="constant" style="color:purple">0</span>)))
</code></pre><h3 id="sec-non-linear-arithmetic" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">2.5</span>. </span>Non linear arithmetic</h3>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code>    config cfg;
    cfg.set(<span style="color:maroon">"</span><span style="color:maroon">auto_config</span><span style="color:maroon">"</span>, <span style="color:blue">true</span>);
    context c(cfg);

    expr x = c.real_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>);
    expr y = c.real_const(<span style="color:maroon">"</span><span style="color:maroon">y</span><span style="color:maroon">"</span>);
    expr z = c.real_const(<span style="color:maroon">"</span><span style="color:maroon">z</span><span style="color:maroon">"</span>);
                     
    solver s(c);

    s.add(x*x + y*y == <span class="constant" style="color:purple">1</span>);                     <span style="color:darkgreen">// x^2 + y^2 == 1</span>
    s.add(x*x*x + z*z*z &lt; c.real_val(<span style="color:maroon">"</span><span style="color:maroon">1/2</span><span style="color:maroon">"</span>));  <span style="color:darkgreen">// x^3 + z^3 &lt; 1/2</span>
    s.add(z != <span class="constant" style="color:purple">0</span>);
    
    std::cout &lt;&lt; s.check() &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    
    model m = s.get_model();
    
    std::cout &lt;&lt; m &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    set_param(<span style="color:maroon">"</span><span style="color:maroon">pp.decimal</span><span style="color:maroon">"</span>, <span style="color:blue">true</span>); <span style="color:darkgreen">// set decimal notation</span>
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">model in decimal notation</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    std::cout &lt;&lt; m &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    set_param(<span style="color:maroon">"</span><span style="color:maroon">pp.decimal-precision</span><span style="color:maroon">"</span>, <span class="constant" style="color:purple">50</span>); <span style="color:darkgreen">// increase number of decimal places to 50.</span>
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">model using 50 decimal places</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    std::cout &lt;&lt; m &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    set_param(<span style="color:maroon">"</span><span style="color:maroon">pp.decimal</span><span style="color:maroon">"</span>, <span style="color:blue">false</span>); <span style="color:darkgreen">// disable decimal notation</span>
}

OUTPUT:

sat
(define-fun x () Real (/ <span class="constant" style="color:purple">1.0</span> <span class="constant" style="color:purple">8.0</span>))
(define-fun y () Real (root-obj (+ (* <span class="constant" style="color:purple">64</span> (^ x <span class="constant" style="color:purple">2</span>)) (- <span class="constant" style="color:purple">63</span>)) <span class="constant" style="color:purple">1</span>))
(define-fun z () Real (/ <span class="constant" style="color:purple">1.0</span> <span class="constant" style="color:purple">2.0</span>))

model <span style="color:blue">in</span> decimal notation
(define-fun x () Real <span class="constant" style="color:purple">0.125</span>)
(define-fun y () Real (- <span class="constant" style="color:purple">0.9921567416</span>?))
(define-fun z () Real <span class="constant" style="color:purple">0.5</span>)

model using <span class="constant" style="color:purple">50</span> decimal places
(define-fun x () Real <span class="constant" style="color:purple">0.125</span>)
(define-fun y () Real (- <span class="constant" style="color:purple">0.99215674164922147143810590761472265964134719365591</span>?))
(define-fun z () Real <span class="constant" style="color:purple">0.5</span>)
</code></pre><h3 id="sec-another-hello-z3-" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">2.6</span>. </span>Another hello z3:</h3>
<ol class="ol compact">
<li class="li ol-li compact-li">create a solver
</li>
<li class="li ol-li compact-li">assert the negation of the conjecture
</li>
<li class="li ol-li compact-li">checks if the result is unsat.
</li></ol>

<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code><span style="color:blue">void</span> prove(expr conjecture) {
    context &amp; c = conjecture.ctx();
    solver s(c);
    s.add(!conjecture);
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">conjecture:</span><span style="color:gray">\n</span><span style="color:maroon">"</span> &lt;&lt; conjecture &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    <span style="color:blue">if</span> (s.check() == unsat) {
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">proved</span><span style="color:maroon">"</span> &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    }
    <span style="color:blue">else</span> {
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">failed to prove</span><span style="color:maroon">"</span> &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
        std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">counterexample:</span><span style="color:gray">\n</span><span style="color:maroon">"</span> &lt;&lt; s.get_model() &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    }
}



</code></pre><h3 id="sec-using-bit-vectors" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">2.7</span>. </span>Using bit-vectors</h3>
<ul class="ul list-star compact">
<li class="li ul-li list-star-li compact-li">Simple bit-vector example. 
</li>
<li class="li ul-li list-star-li compact-li">This example disproves that x - 10 &lt;= 0 IFF x &lt;= 10 for (32-bit) machine integers
</li></ul>

<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code><span style="color:blue">void</span> bitvector_example1() {
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">bitvector example 1</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    context c;
    expr x = c.bv_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>, <span class="constant" style="color:purple">32</span>);
    
    <span style="color:darkgreen">// using signed &lt;=</span>
    prove((x - <span class="constant" style="color:purple">10</span> &lt;= <span class="constant" style="color:purple">0</span>) == (x &lt;= <span class="constant" style="color:purple">10</span>));

    <span style="color:darkgreen">// using unsigned &lt;=</span>
    prove(ule(x - <span class="constant" style="color:purple">10</span>, <span class="constant" style="color:purple">0</span>) == ule(x, <span class="constant" style="color:purple">10</span>));

    expr y = c.bv_const(<span style="color:maroon">"</span><span style="color:maroon">y</span><span style="color:maroon">"</span>, <span class="constant" style="color:purple">32</span>);
    prove(implies(concat(x, y) == concat(y, x), x == y));
}

OUTPUT:
bitvector example <span class="constant" style="color:purple">1</span>

conjecture:
(= (bvsle (bvsub x #x0000000a) #x00000000) (bvsle x #x0000000a))
failed to prove
counterexample:
(define-fun x () (_ BitVec <span class="constant" style="color:purple">32</span>) #x80000000)

conjecture:
(= (bvule (bvsub x #x0000000a) #x00000000) (bvule x #x0000000a))
failed to prove
counterexample:
(define-fun x () (_ BitVec <span class="constant" style="color:purple">32</span>) #x00000000)

conjecture:
(=&gt; (= (concat x y) (concat y x)) (= x y))
proved
</code></pre><h3 id="sec-another-get_model" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">2.8</span>. </span>Another get_model()</h3>
<p class="p noindent"> Find x and y such that: x ^ y - 103 == x * y
</p>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code><span style="color:blue">void</span> bitvector_example2() {
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">bitvector example 2</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    context c;
    expr x = c.bv_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>, <span class="constant" style="color:purple">32</span>);
    expr y = c.bv_const(<span style="color:maroon">"</span><span style="color:maroon">y</span><span style="color:maroon">"</span>, <span class="constant" style="color:purple">32</span>);
    solver s(c);
    <span style="color:darkgreen">// In C++, the operator == has higher precedence than ^.</span>
    s.add((x ^ y) - <span class="constant" style="color:purple">103</span> == x * y);
    std::cout &lt;&lt; s &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    std::cout &lt;&lt; s.check() &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    std::cout &lt;&lt; s.get_model() &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
}</code></pre><h3 id="sec-mixing-c-and-c-apis" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">2.9</span>. </span>Mixing C and C++ APIs.</h3>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code><span style="color:blue">void</span> capi_example() {
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">capi example</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    context c;
    expr x = c.bv_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>, <span class="constant" style="color:purple">32</span>);
    expr y = c.bv_const(<span style="color:maroon">"</span><span style="color:maroon">y</span><span style="color:maroon">"</span>, <span class="constant" style="color:purple">32</span>);
    <span style="color:darkgreen">// Invoking a C API function, and wrapping the result using an expr object.</span>
    expr r = to_expr(c, Z3_mk_bvsrem(c, x, y));
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">r: </span><span style="color:maroon">"</span> &lt;&lt; r &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
}</code></pre><h3 id="sec-how-to-evaluate-expressions-in-a-model" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">2.10</span>. </span>How to evaluate expressions in a model.</h3>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code><span style="color:blue">void</span> eval_example1() {
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">eval example 1</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    context c;
    expr x = c.int_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>);
    expr y = c.int_const(<span style="color:maroon">"</span><span style="color:maroon">y</span><span style="color:maroon">"</span>);
    solver s(c);

    <span style="color:darkgreen">/*</span><span style="color:darkgreen"> assert x &lt; y </span><span style="color:darkgreen">*/</span>
    s.add(x &lt; y);
    <span style="color:darkgreen">/*</span><span style="color:darkgreen"> assert x &gt; 2 </span><span style="color:darkgreen">*/</span>
    s.add(x &gt; <span class="constant" style="color:purple">2</span>);
    
    std::cout &lt;&lt; s.check() &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    
    model m = s.get_model();
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">Model:</span><span style="color:gray">\n</span><span style="color:maroon">"</span> &lt;&lt; m &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">x+y = </span><span style="color:maroon">"</span> &lt;&lt; m.eval(x+y) &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
}</code></pre><h3 id="sec-several-contexts-can-be-used-simultaneously" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">2.11</span>. </span>Several contexts can be used simultaneously.</h3>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code><span style="color:blue">void</span> two_contexts_example1() {
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">two contexts example 1</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    context c1, c2;
    
    expr x = c1.int_const(<span style="color:maroon">"</span><span style="color:maroon">x</span><span style="color:maroon">"</span>);
    expr n = x + <span class="constant" style="color:purple">1</span>;
    <span style="color:darkgreen">// We cannot mix expressions from different contexts, but we can copy</span>
    <span style="color:darkgreen">// an expression from one context to another.</span>
    <span style="color:darkgreen">// The following statement copies the expression n from c1 to c2.</span>
    expr n1 = to_expr(c2, Z3_translate(c1, n, c2));
    std::cout &lt;&lt; n1 &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
}</code></pre><h3 id="sec-dealing-with-rational-numbers" class="h2" data-heading-depth="2" style="display:block"><span class="heading-before"><span class="heading-label">2.12</span>. </span>Dealing with Rational numbers</h3>
<p class="p noindent">Demonstrate different ways of creating rational numbers: 
<em class="em-star1"> decimal and 
</em> fractional representations.
</p>
<pre class="para-block pre-fenced pre-fenced3 language-javascript lang-javascript javascript colorized" style="display:block"><code><span style="color:blue">void</span> numeral_example() {
    std::cout &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon">numeral example</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    context c;
    
    expr n1 = c.real_val(<span style="color:maroon">"</span><span style="color:maroon">1/2</span><span style="color:maroon">"</span>);
    expr n2 = c.real_val(<span style="color:maroon">"</span><span style="color:maroon">0.5</span><span style="color:maroon">"</span>);
    expr n3 = c.real_val(<span class="constant" style="color:purple">1</span>, <span class="constant" style="color:purple">2</span>);
    std::cout &lt;&lt; n1 &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon"> </span><span style="color:maroon">"</span> &lt;&lt; n2 &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon"> </span><span style="color:maroon">"</span> &lt;&lt; n3 &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    prove(n1 == n2 &amp;&amp; n1 == n3);
    
    n1 = c.real_val(<span style="color:maroon">"</span><span style="color:maroon">-1/3</span><span style="color:maroon">"</span>);
    n2 = c.real_val(<span style="color:maroon">"</span><span style="color:maroon">-0.3333333333333333333333333333333333</span><span style="color:maroon">"</span>);
    std::cout &lt;&lt; n1 &lt;&lt; <span style="color:maroon">"</span><span style="color:maroon"> </span><span style="color:maroon">"</span> &lt;&lt; n2 &lt;&lt; <span style="color:maroon">"</span><span style="color:gray">\n</span><span style="color:maroon">"</span>;
    prove(n1 != n2);
}</code></pre><span data-line=""></span></div>
<svg id="math-svg-paths" style="display:none" version="1.1" viewBox="0 0 0 0" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<defs>
<path d="M6.087 -3.188C6.087 -3.517 6.057 -3.547 5.738 -3.547H0.897C0.727 -3.547 0.548 -3.547 0.548 -3.347S0.727 -3.148 0.897 -3.148H5.689V-1.245C5.689 -1.066 5.689 -0.887 5.888 -0.887S6.087 -1.066 6.087 -1.245V-3.188Z" id="g0-58"></path>
<path d="M3.547 -5.748C3.467 -5.918 3.407 -5.958 3.318 -5.958C3.188 -5.958 3.158 -5.888 3.098 -5.748L0.618 -0.179C0.558 -0.05 0.548 -0.03 0.548 0.02C0.548 0.13 0.638 0.219 0.747 0.219C0.817 0.219 0.897 0.199 0.976 0.01L3.318 -5.27L5.659 0.01C5.748 0.219 5.848 0.219 5.888 0.219C5.998 0.219 6.087 0.13 6.087 0.02C6.087 0 6.087 -0.02 6.027 -0.139L3.547 -5.748Z" id="g0-94"></path>
<path d="M6.017 -5.559C6.077 -5.689 6.087 -5.709 6.087 -5.758C6.087 -5.868 5.998 -5.958 5.888 -5.958C5.788 -5.958 5.729 -5.888 5.659 -5.738L3.318 -0.468L0.976 -5.748C0.897 -5.938 0.817 -5.958 0.747 -5.958C0.638 -5.958 0.548 -5.868 0.548 -5.758C0.548 -5.738 0.548 -5.719 0.608 -5.599L3.088 0.01C3.168 0.179 3.228 0.219 3.318 0.219C3.447 0.219 3.477 0.149 3.537 0.01L6.017 -5.559Z" id="g0-95"></path>
<path d="M3.328 -3.009C3.387 -3.268 3.616 -4.184 4.314 -4.184C4.364 -4.184 4.603 -4.184 4.812 -4.055C4.533 -4.005 4.334 -3.756 4.334 -3.517C4.334 -3.357 4.443 -3.168 4.712 -3.168C4.932 -3.168 5.25 -3.347 5.25 -3.746C5.25 -4.264 4.663 -4.403 4.324 -4.403C3.746 -4.403 3.397 -3.875 3.278 -3.646C3.029 -4.304 2.491 -4.403 2.202 -4.403C1.166 -4.403 0.598 -3.118 0.598 -2.869C0.598 -2.77 0.697 -2.77 0.717 -2.77C0.797 -2.77 0.827 -2.79 0.847 -2.879C1.186 -3.935 1.843 -4.184 2.182 -4.184C2.371 -4.184 2.72 -4.095 2.72 -3.517C2.72 -3.208 2.55 -2.54 2.182 -1.146C2.022 -0.528 1.674 -0.11 1.235 -0.11C1.176 -0.11 0.946 -0.11 0.737 -0.239C0.986 -0.289 1.205 -0.498 1.205 -0.777C1.205 -1.046 0.986 -1.126 0.837 -1.126C0.538 -1.126 0.289 -0.867 0.289 -0.548C0.289 -0.09 0.787 0.11 1.225 0.11C1.883 0.11 2.242 -0.588 2.271 -0.648C2.391 -0.279 2.75 0.11 3.347 0.11C4.374 0.11 4.941 -1.176 4.941 -1.425C4.941 -1.524 4.852 -1.524 4.822 -1.524C4.732 -1.524 4.712 -1.484 4.692 -1.415C4.364 -0.349 3.686 -0.11 3.367 -0.11C2.979 -0.11 2.819 -0.428 2.819 -0.767C2.819 -0.986 2.879 -1.205 2.989 -1.644L3.328 -3.009Z" id="g1-120"></path>
<path d="M4.842 -3.796C4.882 -3.935 4.882 -3.955 4.882 -4.025C4.882 -4.204 4.742 -4.294 4.593 -4.294C4.493 -4.294 4.334 -4.234 4.244 -4.085C4.224 -4.035 4.144 -3.726 4.105 -3.547C4.035 -3.288 3.965 -3.019 3.905 -2.75L3.457 -0.956C3.417 -0.807 2.989 -0.11 2.331 -0.11C1.823 -0.11 1.714 -0.548 1.714 -0.917C1.714 -1.375 1.883 -1.993 2.222 -2.869C2.381 -3.278 2.421 -3.387 2.421 -3.587C2.421 -4.035 2.102 -4.403 1.604 -4.403C0.658 -4.403 0.289 -2.959 0.289 -2.869C0.289 -2.77 0.389 -2.77 0.408 -2.77C0.508 -2.77 0.518 -2.79 0.568 -2.949C0.837 -3.885 1.235 -4.184 1.574 -4.184C1.654 -4.184 1.823 -4.184 1.823 -3.866C1.823 -3.616 1.724 -3.357 1.654 -3.168C1.255 -2.112 1.076 -1.544 1.076 -1.076C1.076 -0.189 1.704 0.11 2.291 0.11C2.68 0.11 3.019 -0.06 3.298 -0.339C3.168 0.179 3.049 0.667 2.65 1.196C2.391 1.534 2.012 1.823 1.554 1.823C1.415 1.823 0.966 1.793 0.797 1.405C0.956 1.405 1.086 1.405 1.225 1.285C1.325 1.196 1.425 1.066 1.425 0.877C1.425 0.568 1.156 0.528 1.056 0.528C0.827 0.528 0.498 0.687 0.498 1.176C0.498 1.674 0.936 2.042 1.554 2.042C2.58 2.042 3.606 1.136 3.885 0.01L4.842 -3.796Z" id="g1-121"></path>
<path d="M3.298 2.391C3.298 2.361 3.298 2.341 3.128 2.172C1.883 0.917 1.564 -0.966 1.564 -2.491C1.564 -4.224 1.943 -5.958 3.168 -7.203C3.298 -7.323 3.298 -7.342 3.298 -7.372C3.298 -7.442 3.258 -7.472 3.198 -7.472C3.098 -7.472 2.202 -6.795 1.614 -5.529C1.106 -4.433 0.986 -3.328 0.986 -2.491C0.986 -1.714 1.096 -0.508 1.644 0.618C2.242 1.843 3.098 2.491 3.198 2.491C3.258 2.491 3.298 2.461 3.298 2.391Z" id="g2-40"></path>
<path d="M2.879 -2.491C2.879 -3.268 2.77 -4.473 2.222 -5.599C1.624 -6.824 0.767 -7.472 0.667 -7.472C0.608 -7.472 0.568 -7.432 0.568 -7.372C0.568 -7.342 0.568 -7.323 0.757 -7.143C1.733 -6.157 2.301 -4.573 2.301 -2.491C2.301 -0.787 1.933 0.966 0.697 2.222C0.568 2.341 0.568 2.361 0.568 2.391C0.568 2.451 0.608 2.491 0.667 2.491C0.767 2.491 1.664 1.813 2.252 0.548C2.76 -0.548 2.879 -1.654 2.879 -2.491Z" id="g2-41"></path>
<path d="M6.844 -3.258C6.994 -3.258 7.183 -3.258 7.183 -3.457S6.994 -3.656 6.854 -3.656H0.887C0.747 -3.656 0.558 -3.656 0.558 -3.457S0.747 -3.258 0.897 -3.258H6.844ZM6.854 -1.325C6.994 -1.325 7.183 -1.325 7.183 -1.524S6.994 -1.724 6.844 -1.724H0.897C0.747 -1.724 0.558 -1.724 0.558 -1.524S0.747 -1.325 0.887 -1.325H6.854Z" id="g2-61"></path>
<path d="M6.715 -3.228C6.854 -3.288 6.914 -3.357 6.914 -3.447C6.914 -3.547 6.874 -3.606 6.715 -3.676L1.225 -6.267C1.086 -6.336 1.046 -6.336 1.026 -6.336C0.907 -6.336 0.827 -6.247 0.827 -6.137C0.827 -6.017 0.907 -5.968 1.016 -5.918L6.247 -3.457L1.036 -0.996C0.837 -0.907 0.827 -0.827 0.827 -0.767C0.827 -0.658 0.917 -0.568 1.026 -0.568C1.056 -0.568 1.076 -0.568 1.205 -0.638L6.715 -3.228ZM6.565 1.365C6.735 1.365 6.914 1.365 6.914 1.166S6.705 0.966 6.555 0.966H1.186C1.036 0.966 0.827 0.966 0.827 1.166S1.006 1.365 1.176 1.365H6.565Z" id="g0-21"></path>
<path d="M2.929 -6.376C2.929 -6.615 2.929 -6.635 2.7 -6.635C2.082 -5.998 1.205 -5.998 0.887 -5.998V-5.689C1.086 -5.689 1.674 -5.689 2.192 -5.948V-0.787C2.192 -0.428 2.162 -0.309 1.265 -0.309H0.946V0C1.295 -0.03 2.162 -0.03 2.56 -0.03S3.826 -0.03 4.174 0V-0.309H3.856C2.959 -0.309 2.929 -0.418 2.929 -0.787V-6.376Z" id="g2-49"></path>
<path d="M6.725 -4.961C6.844 -5.021 6.914 -5.071 6.914 -5.181S6.824 -5.38 6.715 -5.38C6.685 -5.38 6.665 -5.38 6.535 -5.31L1.016 -2.71C0.907 -2.66 0.827 -2.61 0.827 -2.491S0.907 -2.321 1.016 -2.271L6.535 0.329C6.665 0.399 6.685 0.399 6.715 0.399C6.824 0.399 6.914 0.309 6.914 0.199S6.844 0.04 6.725 -0.02L1.494 -2.491L6.725 -4.961Z" id="g1-60"></path>
<path d="M4.075 -2.291H6.854C6.994 -2.291 7.183 -2.291 7.183 -2.491S6.994 -2.69 6.854 -2.69H4.075V-5.479C4.075 -5.619 4.075 -5.808 3.875 -5.808S3.676 -5.619 3.676 -5.479V-2.69H0.887C0.747 -2.69 0.558 -2.69 0.558 -2.491S0.747 -2.291 0.887 -2.291H3.676V0.498C3.676 0.638 3.676 0.827 3.875 0.827S4.075 0.638 4.075 0.498V-2.291Z" id="g2-43"></path>
<path d="M2.889 -3.507C3.706 -3.776 4.284 -4.473 4.284 -5.26C4.284 -6.077 3.407 -6.635 2.451 -6.635C1.445 -6.635 0.687 -6.037 0.687 -5.28C0.687 -4.951 0.907 -4.762 1.196 -4.762C1.504 -4.762 1.704 -4.981 1.704 -5.27C1.704 -5.768 1.235 -5.768 1.086 -5.768C1.395 -6.257 2.052 -6.386 2.411 -6.386C2.819 -6.386 3.367 -6.167 3.367 -5.27C3.367 -5.151 3.347 -4.573 3.088 -4.134C2.79 -3.656 2.451 -3.626 2.202 -3.616C2.122 -3.606 1.883 -3.587 1.813 -3.587C1.733 -3.577 1.664 -3.567 1.664 -3.467C1.664 -3.357 1.733 -3.357 1.903 -3.357H2.341C3.158 -3.357 3.527 -2.68 3.527 -1.704C3.527 -0.349 2.839 -0.06 2.401 -0.06C1.973 -0.06 1.225 -0.229 0.877 -0.817C1.225 -0.767 1.534 -0.986 1.534 -1.365C1.534 -1.724 1.265 -1.923 0.976 -1.923C0.737 -1.923 0.418 -1.783 0.418 -1.345C0.418 -0.438 1.345 0.219 2.431 0.219C3.646 0.219 4.553 -0.687 4.553 -1.704C4.553 -2.521 3.925 -3.298 2.889 -3.507Z" id="g2-51"></path>
<path d="M7.233 -3.258C7.651 -2.899 8.159 -2.64 8.488 -2.491C8.13 -2.331 7.641 -2.072 7.233 -1.724H0.907C0.737 -1.724 0.548 -1.724 0.548 -1.524S0.727 -1.325 0.897 -1.325H6.785C6.306 -0.867 5.788 0.01 5.788 0.139C5.788 0.249 5.918 0.249 5.978 0.249C6.057 0.249 6.127 0.249 6.167 0.169C6.376 -0.209 6.655 -0.737 7.303 -1.315C7.99 -1.923 8.658 -2.192 9.176 -2.341C9.345 -2.401 9.355 -2.411 9.375 -2.431C9.395 -2.441 9.395 -2.471 9.395 -2.491S9.395 -2.531 9.385 -2.55L9.355 -2.57C9.335 -2.58 9.325 -2.59 9.136 -2.65C7.791 -3.049 6.795 -3.955 6.237 -5.021C6.127 -5.22 6.117 -5.23 5.978 -5.23C5.918 -5.23 5.788 -5.23 5.788 -5.121C5.788 -4.991 6.296 -4.125 6.785 -3.656H0.897C0.727 -3.656 0.548 -3.656 0.548 -3.457S0.737 -3.258 0.907 -3.258H7.233Z" id="g0-41"></path>
<path d="M4.692 -3.756C4.702 -3.816 4.722 -3.866 4.722 -3.935C4.722 -4.105 4.603 -4.204 4.433 -4.204C4.334 -4.204 4.065 -4.134 4.025 -3.776C3.846 -4.144 3.497 -4.403 3.098 -4.403C1.963 -4.403 0.727 -3.009 0.727 -1.574C0.727 -0.588 1.335 0 2.052 0C2.64 0 3.108 -0.468 3.208 -0.578L3.218 -0.568C3.009 0.319 2.889 0.727 2.889 0.747C2.849 0.837 2.511 1.823 1.455 1.823C1.265 1.823 0.936 1.813 0.658 1.724C0.956 1.634 1.066 1.375 1.066 1.205C1.066 1.046 0.956 0.857 0.687 0.857C0.468 0.857 0.149 1.036 0.149 1.435C0.149 1.843 0.518 2.042 1.474 2.042C2.72 2.042 3.437 1.265 3.587 0.667L4.692 -3.756ZM3.397 -1.275C3.337 -1.016 3.108 -0.767 2.889 -0.578C2.68 -0.399 2.371 -0.219 2.082 -0.219C1.584 -0.219 1.435 -0.737 1.435 -1.136C1.435 -1.614 1.724 -2.79 1.993 -3.298C2.262 -3.786 2.69 -4.184 3.108 -4.184C3.766 -4.184 3.905 -3.377 3.905 -3.328S3.885 -3.218 3.875 -3.178L3.397 -1.275Z" id="g1-103"></path>
<path d="M6.565 -2.291C6.735 -2.291 6.914 -2.291 6.914 -2.491S6.735 -2.69 6.565 -2.69H1.176C1.006 -2.69 0.827 -2.69 0.827 -2.491S1.006 -2.291 1.176 -2.291H6.565Z" id="g0-0"></path>
<path d="M1.325 -0.827C1.863 -1.405 2.152 -1.654 2.511 -1.963C2.511 -1.973 3.128 -2.501 3.487 -2.859C4.433 -3.786 4.653 -4.264 4.653 -4.304C4.653 -4.403 4.563 -4.403 4.543 -4.403C4.473 -4.403 4.443 -4.384 4.394 -4.294C4.095 -3.816 3.885 -3.656 3.646 -3.656S3.288 -3.806 3.138 -3.975C2.949 -4.204 2.78 -4.403 2.451 -4.403C1.704 -4.403 1.245 -3.477 1.245 -3.268C1.245 -3.218 1.275 -3.158 1.365 -3.158S1.474 -3.208 1.494 -3.268C1.684 -3.726 2.262 -3.736 2.341 -3.736C2.55 -3.736 2.74 -3.666 2.969 -3.587C3.367 -3.437 3.477 -3.437 3.736 -3.437C3.377 -3.009 2.54 -2.291 2.351 -2.132L1.455 -1.295C0.777 -0.628 0.428 -0.06 0.428 0.01C0.428 0.11 0.528 0.11 0.548 0.11C0.628 0.11 0.648 0.09 0.707 -0.02C0.936 -0.369 1.235 -0.638 1.554 -0.638C1.783 -0.638 1.883 -0.548 2.132 -0.259C2.301 -0.05 2.481 0.11 2.77 0.11C3.756 0.11 4.334 -1.156 4.334 -1.425C4.334 -1.474 4.294 -1.524 4.214 -1.524C4.125 -1.524 4.105 -1.465 4.075 -1.395C3.846 -0.747 3.208 -0.558 2.879 -0.558C2.68 -0.558 2.501 -0.618 2.291 -0.687C1.953 -0.817 1.803 -0.857 1.594 -0.857C1.574 -0.857 1.415 -0.857 1.325 -0.827Z" id="g1-122"></path>
<path d="M6.725 -5.918C6.834 -5.968 6.914 -6.017 6.914 -6.137C6.914 -6.247 6.834 -6.336 6.715 -6.336C6.665 -6.336 6.575 -6.296 6.535 -6.276L1.026 -3.676C0.857 -3.597 0.827 -3.527 0.827 -3.447C0.827 -3.357 0.887 -3.288 1.026 -3.228L6.535 -0.638C6.665 -0.568 6.685 -0.568 6.715 -0.568C6.824 -0.568 6.914 -0.658 6.914 -0.767C6.914 -0.857 6.874 -0.917 6.705 -0.996L1.494 -3.447L6.725 -5.918ZM6.565 1.365C6.735 1.365 6.914 1.365 6.914 1.166S6.705 0.966 6.555 0.966H1.186C1.036 0.966 0.827 0.966 0.827 1.166S1.006 1.365 1.176 1.365H6.565Z" id="g0-20"></path>
<path d="M4.583 -3.188C4.583 -3.985 4.533 -4.782 4.184 -5.519C3.726 -6.476 2.909 -6.635 2.491 -6.635C1.893 -6.635 1.166 -6.376 0.757 -5.45C0.438 -4.762 0.389 -3.985 0.389 -3.188C0.389 -2.441 0.428 -1.544 0.837 -0.787C1.265 0.02 1.993 0.219 2.481 0.219C3.019 0.219 3.776 0.01 4.214 -0.936C4.533 -1.624 4.583 -2.401 4.583 -3.188ZM2.481 0C2.092 0 1.504 -0.249 1.325 -1.205C1.215 -1.803 1.215 -2.72 1.215 -3.308C1.215 -3.945 1.215 -4.603 1.295 -5.141C1.484 -6.326 2.232 -6.416 2.481 -6.416C2.809 -6.416 3.467 -6.237 3.656 -5.25C3.756 -4.692 3.756 -3.935 3.756 -3.308C3.756 -2.56 3.756 -1.883 3.646 -1.245C3.497 -0.299 2.929 0 2.481 0Z" id="g2-48"></path>
</defs>
</svg>




</body></html>